import { AssertionError } from './assertion.error';
/** Wraps the JavaScript built-in "instanceof" in a type guard assertion. */
export function assertInstanceOf(
/** The value to check. */
instance, 
/** The constructor that the "instance" input will be checked against. */
classConstructor, 
/** Message to include in error message if this assertion fails. */
failureMessage) {
    if (!(instance instanceof classConstructor)) {
        throw new AssertionError(failureMessage || `instanceof assertion failed`);
    }
}
/** Wraps the JavaScript built-in "instanceof" in a type guard. */
export function isInstanceOf(
/** The value to check. */
instance, 
/** The constructor that the "instance" input will be checked against. */
classConstructor) {
    try {
        assertInstanceOf(instance, classConstructor);
        return true;
    }
    catch (error) {
        if (error instanceof AssertionError) {
            return false;
            // just a safeguard that we can't intentionally trigger
            /* c8 ignore next 3 */
        }
        else {
            throw error;
        }
    }
}
/** Asserts that the given input is defined (not null and not undefined) */
export function assertDefined(
/** The value to check. */
input, 
/** Message to include in error message if this assertion fails. */
failureMessage) {
    if (input == undefined) {
        throw new AssertionError(failureMessage || 'defined assertion failed');
    }
}
/** Checks that the given input is defined (not null and not undefined) */
export function isDefined(
/** The value to check. */
input) {
    try {
        assertDefined(input);
        return true;
    }
    catch (error) {
        if (error instanceof AssertionError) {
            return false;
            // just a safeguard that we can't intentionally trigger
            /* c8 ignore next 3 */
        }
        else {
            throw error;
        }
    }
}
