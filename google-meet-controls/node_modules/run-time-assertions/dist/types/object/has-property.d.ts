import type { SetRequired } from 'type-fest';
/** Helper type for `hasProperty`. */
export type ExtractValue<KeyGeneric extends PropertyKey, ParentGeneric> = KeyGeneric extends keyof ParentGeneric ? SetRequired<ParentGeneric, KeyGeneric>[KeyGeneric] : KeyGeneric extends keyof Extract<ParentGeneric, Record<KeyGeneric, any>> ? SetRequired<Extract<ParentGeneric, Record<KeyGeneric, any>>, KeyGeneric>[KeyGeneric] : never;
/** Helper type for `hasProperty`. */
export type CombinedParentValue<KeyGeneric extends PropertyKey, ParentGeneric> = ExtractValue<KeyGeneric, ParentGeneric> extends never ? unknown : ExtractValue<KeyGeneric, ParentGeneric>;
/** Helper type for `hasProperty`. */
export type CombineTypeWithKey<KeyGeneric extends PropertyKey, ParentGeneric> = ParentGeneric & Record<KeyGeneric, CombinedParentValue<KeyGeneric, ParentGeneric>>;
/** Check if an object has the given property. */
export declare function hasProperty<KeyGeneric extends PropertyKey, ParentGeneric>(inputObject: ParentGeneric, property: KeyGeneric): inputObject is CombineTypeWithKey<KeyGeneric, ParentGeneric>;
/** Check if an object has all the given properties. */
export declare function hasProperties<KeyGeneric extends PropertyKey, ParentGeneric>(inputObject: ParentGeneric, inputKeys: ReadonlyArray<KeyGeneric>): inputObject is CombineTypeWithKey<KeyGeneric, ParentGeneric>;
/**
 * Checks if the given property exists in the given object. This is distinct from `hasProperty`
 * because it type guards the property rather than the object.
 */
export declare function isPropertyOf<ParentType>(property: PropertyKey, inputObject: ParentType): property is keyof ParentType;
