import type { AnyFunction } from '@augment-vir/common';
/** This function is not used at run time, it's only here for types. */
declare function rawGetTypeOf(x: any): "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function";
/** Raw outputs from the typeof operator. */
export type RawTypeOfOutput = ReturnType<typeof rawGetTypeOf>;
/**
 * The available run-time type options. In addition to the options returned by the built-in `typeof`
 * operator, this adds `'array'` as a type string.
 */
export type RunTimeType = RawTypeOfOutput | 'array' | 'null';
/** The type that each RunTimeType string maps to. */
export type RunTimeTypeMapping = {
    array: unknown[] | ReadonlyArray<unknown>;
    bigint: bigint;
    boolean: boolean;
    function: AnyFunction | Readonly<AnyFunction>;
    number: number;
    object: Record<PropertyKey, unknown> | Readonly<Record<PropertyKey, unknown>>;
    string: string;
    symbol: symbol;
    undefined: undefined;
    null: null;
};
/**
 * Gets the run time type of the input. Note that this returns `'array'` for arrays rather than
 * 'object' (vs the built-in `typeof` operator that return `'object'` for both arrays and objects.)
 */
export declare function getRunTimeType(input: unknown): RunTimeType;
/** Checks if the input matches the given test type. */
export declare function isRunTimeType<T extends RunTimeType>(input: unknown, testType: T): input is RunTimeTypeMapping[T];
/**
 * Asserts that the given input matches the given test type. Note that an name for the input must be
 * provided for error messaging purposes.
 */
export declare function assertRunTimeType<T extends RunTimeType>(input: unknown, testType: T, failureMessage?: string | undefined): asserts input is RunTimeTypeMapping[T];
export {};
