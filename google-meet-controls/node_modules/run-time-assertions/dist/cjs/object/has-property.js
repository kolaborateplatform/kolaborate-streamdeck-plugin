"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasProperty = hasProperty;
exports.hasProperties = hasProperties;
exports.isPropertyOf = isPropertyOf;
const hasPropertyAttempts = [
    (object, key) => {
        return key in object;
    },
    (object, key) => {
        /** This handles cases where the input object can't use `in` directly, like string literals */
        return key in object.constructor.prototype;
    },
];
/** Check if an object has the given property. */
function hasProperty(inputObject, property) {
    if (!inputObject) {
        return false;
    }
    return hasPropertyAttempts.some((attemptCallback) => {
        try {
            return attemptCallback(inputObject, property);
        }
        catch (error) {
            return false;
        }
    });
}
/** Check if an object has all the given properties. */
function hasProperties(inputObject, inputKeys) {
    return inputObject && inputKeys.every((key) => hasProperty(inputObject, key));
}
/**
 * Checks if the given property exists in the given object. This is distinct from `hasProperty`
 * because it type guards the property rather than the object.
 */
function isPropertyOf(property, inputObject) {
    return hasProperty(inputObject, property);
}
