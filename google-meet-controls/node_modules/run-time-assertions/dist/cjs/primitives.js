"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertIsPrimitive = assertIsPrimitive;
exports.isPrimitive = isPrimitive;
exports.assertIsPropertyKey = assertIsPropertyKey;
exports.isPropertyKey = isPropertyKey;
const assertion_error_1 = require("./assertion.error");
const run_time_types_1 = require("./run-time-types");
/** Asserts that the given value is a primitive. */
function assertIsPrimitive(value, failureMessage) {
    /**
     * `null` is a primitive but `typeof null` gives `'object'` so we have to special case `null`
     * here.
     */
    if (value === null) {
        return;
    }
    if (typeof value === 'object' || typeof value === 'function') {
        throw new assertion_error_1.AssertionError(failureMessage || 'value is not a primitive');
    }
}
/** Checks if the given value is a primitive or not. */
function isPrimitive(value) {
    try {
        assertIsPrimitive(value);
        return true;
    }
    catch (error) {
        return false;
    }
}
/** Asserts that the given value is a PropertyKey ( string | number | symbol). */
function assertIsPropertyKey(value, failureMessage) {
    if ((0, run_time_types_1.isRunTimeType)(value, 'string') ||
        (0, run_time_types_1.isRunTimeType)(value, 'number') ||
        (0, run_time_types_1.isRunTimeType)(value, 'symbol')) {
        return;
    }
    else {
        throw new assertion_error_1.AssertionError(failureMessage ||
            `value is of type '${(0, run_time_types_1.getRunTimeType)(value)}' but expected a PropertyKey.`);
    }
}
/** Tests if the given value is a PropertyKey ( string | number | symbol). */
function isPropertyKey(value) {
    try {
        assertIsPropertyKey(value);
        return true;
    }
    catch (error) {
        return false;
    }
}
