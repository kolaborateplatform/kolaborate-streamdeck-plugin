import { isTruthy } from './boolean';
import { typedHasProperty } from './object/typed-has-property';
export function combineErrors(errors) {
    if (!errors || errors.length === 0) {
        return undefined;
    }
    const firstError = errors[0];
    if (errors.length === 1 && firstError) {
        return firstError;
    }
    return new Error(errors.map((error) => extractErrorMessage(error).trim()).join('\n'));
}
export function combineErrorMessages(errors) {
    if (!errors) {
        return '';
    }
    return errors.map(extractErrorMessage).filter(isTruthy).join('\n');
}
export function extractErrorMessage(maybeError) {
    if (!maybeError) {
        return '';
    }
    if (maybeError instanceof Error) {
        return maybeError.message;
    }
    else if (typedHasProperty(maybeError, 'message')) {
        return String(maybeError.message);
    }
    else {
        return String(maybeError);
    }
}
export function ensureError(maybeError) {
    if (maybeError instanceof Error) {
        return maybeError;
    }
    else {
        return new Error(extractErrorMessage(maybeError));
    }
}
export function ensureErrorAndPrependMessage(maybeError, prependMessage) {
    const error = ensureError(maybeError);
    error.message = `${prependMessage}: ${error.message}`;
    return error;
}
