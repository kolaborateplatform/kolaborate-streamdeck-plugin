import { isPrimitive } from 'run-time-assertions';
import { isLengthAtLeast } from '../tuple';
import { omitObjectKeys } from './filter-object';
import { mapObjectValues } from './map-object';
import { isObject } from './object';
function shouldPreserve(input) {
    return isPrimitive(input) || input instanceof RegExp || input instanceof Promise;
}
export function selectFrom(originalObject, selectionSet) {
    if (Array.isArray(originalObject)) {
        return originalObject.map((originalEntry) => selectFrom(originalEntry, selectionSet));
    }
    const keysToRemove = [];
    return omitObjectKeys(mapObjectValues(originalObject, (key, value) => {
        const selection = selectionSet[key];
        if (selection === true) {
            return value;
        }
        else if (!selection) {
            keysToRemove.push(key);
            return undefined;
        }
        else if (shouldPreserve(value)) {
            return value;
        }
        else {
            return selectFrom(value, selection);
        }
    }), keysToRemove);
}
export function selectCollapsedFrom(originalObject, selectionSet) {
    const selected = selectFrom(originalObject, selectionSet);
    return collapseObject(selected, selectionSet);
}
function collapseObject(input, selectionSet) {
    if (shouldPreserve(input)) {
        return input;
    }
    const keys = Object.keys(input);
    if (Array.isArray(input)) {
        return input.map((innerInput) => collapseObject(innerInput, selectionSet));
    }
    else if (isLengthAtLeast(keys, 2)) {
        return input;
    }
    else if (isLengthAtLeast(keys, 1) && isObject(selectionSet)) {
        return collapseObject(input[keys[0]], selectionSet[keys[0]]);
    }
    else {
        return input;
    }
}
