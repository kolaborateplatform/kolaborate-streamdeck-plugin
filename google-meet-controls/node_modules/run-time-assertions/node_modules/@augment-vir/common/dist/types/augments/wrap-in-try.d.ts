import { NoInputsFunction } from './function';
import { PartialAndUndefined } from './object/object';
export type WrapInTryOptions<FallbackValue> = PartialAndUndefined<{
    /**
     * A callback that is passed the error. The output of this callback is returned by `wrapInTry`.
     * This takes precedence over the other two options.
     */
    handleError: (error: unknown) => FallbackValue;
    /**
     * Fallback to this value if the callback passed to `wrapInTry` throws an error. Takes
     * precedence over `returnError`.
     */
    fallbackValue: FallbackValue;
}>;
export declare function wrapInTry<Value extends Promise<any>>(callback: NoInputsFunction<Value>, options?: undefined | {
    handleError?: never;
    fallbackValue?: never;
}): Promise<Error | Awaited<Value>>;
export declare function wrapInTry<Value>(callback: NoInputsFunction<Value>, options?: undefined | {
    handleError?: never;
    fallbackValue?: never;
}): Error | Value;
export declare function wrapInTry<Value extends Promise<any>, FallbackValue = undefined>(callback: NoInputsFunction<Value>, options: {
    handleError: (error: unknown) => FallbackValue;
    fallbackValue?: FallbackValue;
}): Promise<Awaited<FallbackValue> | Awaited<Value>>;
export declare function wrapInTry<Value, FallbackValue = undefined>(callback: NoInputsFunction<Value>, options: {
    handleError: (error: unknown) => FallbackValue;
    fallbackValue?: FallbackValue;
}): FallbackValue | Value;
export declare function wrapInTry<Value extends Promise<any>, FallbackValue = undefined>(callback: NoInputsFunction<Value>, options: {
    handleError?: ((error: unknown) => FallbackValue) | undefined;
    fallbackValue: FallbackValue;
}): Promise<Awaited<FallbackValue> | Awaited<Value>>;
export declare function wrapInTry<Value, FallbackValue = undefined>(callback: NoInputsFunction<Value>, options: {
    handleError?: ((error: unknown) => FallbackValue) | undefined;
    fallbackValue: FallbackValue;
}): FallbackValue | Value;
export declare function wrapInTry<Value extends Promise<any>, FallbackValue = undefined>(callback: NoInputsFunction<Value>, options?: WrapInTryOptions<FallbackValue> | undefined): Promise<FallbackValue | Value | Error>;
export declare function wrapInTry<Value, FallbackValue = undefined>(callback: NoInputsFunction<Value>, options?: WrapInTryOptions<FallbackValue> | undefined): FallbackValue | Value | Error;
