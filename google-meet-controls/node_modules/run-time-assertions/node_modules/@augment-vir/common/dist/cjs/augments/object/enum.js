"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEnumTypedKeys = getEnumTypedKeys;
exports.getEnumTypedValues = getEnumTypedValues;
exports.isEnumValue = isEnumValue;
exports.ensureEnum = ensureEnum;
exports.filterToEnumValues = filterToEnumValues;
const object_entries_1 = require("./object-entries");
function getEnumTypedKeys(input) {
    // enum keys are always strings
    return (0, object_entries_1.getObjectTypedKeys)(input).filter((key) => isNaN(Number(key)));
}
function getEnumTypedValues(input) {
    const keys = getEnumTypedKeys(input);
    return keys.map((key) => input[key]);
}
/** Check if the given value is within the given enum. */
function isEnumValue(input, checkEnum) {
    return getEnumTypedValues(checkEnum).includes(input);
}
/** Interpret a primitive as an enum value with type safety. */
function ensureEnum(value, checkEnum) {
    if (isEnumValue(value, checkEnum)) {
        return value;
    }
    else {
        const enumValues = getEnumTypedValues(checkEnum);
        throw new Error(`Given value '${value}' does not match given enum. Possible enum values: ${enumValues.join(',')}`);
    }
}
function filterToEnumValues(inputs, checkEnum, caseInsensitive = false) {
    if (caseInsensitive) {
        return inputs.reduce((accum, currentInput) => {
            const matchedEnumValue = getEnumTypedValues(checkEnum).find((actualEnumValue) => {
                return String(actualEnumValue).toUpperCase() === String(currentInput).toUpperCase();
            });
            if (matchedEnumValue) {
                return accum.concat(matchedEnumValue);
            }
            else {
                return accum;
            }
        }, []);
    }
    else {
        return inputs.filter((input) => isEnumValue(input, checkEnum));
    }
}
