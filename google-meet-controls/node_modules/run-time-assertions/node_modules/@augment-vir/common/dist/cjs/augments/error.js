"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.combineErrors = combineErrors;
exports.combineErrorMessages = combineErrorMessages;
exports.extractErrorMessage = extractErrorMessage;
exports.ensureError = ensureError;
exports.ensureErrorAndPrependMessage = ensureErrorAndPrependMessage;
const boolean_1 = require("./boolean");
const typed_has_property_1 = require("./object/typed-has-property");
function combineErrors(errors) {
    if (!errors || errors.length === 0) {
        return undefined;
    }
    const firstError = errors[0];
    if (errors.length === 1 && firstError) {
        return firstError;
    }
    return new Error(errors.map((error) => extractErrorMessage(error).trim()).join('\n'));
}
function combineErrorMessages(errors) {
    if (!errors) {
        return '';
    }
    return errors.map(extractErrorMessage).filter(boolean_1.isTruthy).join('\n');
}
function extractErrorMessage(maybeError) {
    if (!maybeError) {
        return '';
    }
    if (maybeError instanceof Error) {
        return maybeError.message;
    }
    else if ((0, typed_has_property_1.typedHasProperty)(maybeError, 'message')) {
        return String(maybeError.message);
    }
    else {
        return String(maybeError);
    }
}
function ensureError(maybeError) {
    if (maybeError instanceof Error) {
        return maybeError;
    }
    else {
        return new Error(extractErrorMessage(maybeError));
    }
}
function ensureErrorAndPrependMessage(maybeError, prependMessage) {
    const error = ensureError(maybeError);
    error.message = `${prependMessage}: ${error.message}`;
    return error;
}
