"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultOptions = exports.options = exports.parsers = exports.pluginMarker = void 0;
const common_1 = require("@augment-vir/common");
const parser_typescript_1 = require("prettier/parser-typescript");
const babel_1 = require("prettier/plugins/babel");
const options_1 = require("./options");
const preprocessing_1 = require("./preprocessing");
const multiline_array_printer_1 = require("./printer/multiline-array-printer");
// exports in case others want to utilize these
__exportStar(require("./options"), exports);
var plugin_marker_1 = require("./plugin-marker");
Object.defineProperty(exports, "pluginMarker", { enumerable: true, get: function () { return plugin_marker_1.pluginMarker; } });
exports.parsers = (0, common_1.mapObjectValues)({
    typescript: parser_typescript_1.parsers.typescript,
    babel: babel_1.parsers.babel,
    'babel-ts': babel_1.parsers['babel-ts'],
    json: babel_1.parsers.json,
    json5: babel_1.parsers.json5,
}, (languageName, parserEntry) => {
    return (0, preprocessing_1.wrapParser)(parserEntry, languageName);
});
const printers = {
    estree: multiline_array_printer_1.multilineArrayPrinter,
    'estree-json': multiline_array_printer_1.multilineArrayPrinter,
};
exports.options = (0, common_1.getObjectTypedKeys)(options_1.defaultMultilineArrayOptions).reduce((accum, key) => {
    const defaultValue = options_1.defaultMultilineArrayOptions[key];
    const supportOption = {
        name: key,
        type: (typeof defaultValue === 'number' ? 'int' : typeof defaultValue),
        category: 'multilineArray',
        default: defaultValue,
        description: options_1.optionHelp[key],
    };
    accum[key] = supportOption;
    return accum;
}, {});
exports.defaultOptions = options_1.defaultMultilineArrayOptions;
/** Not actually exported: this is just for type checking purposes. */
const plugin = {
    options: exports.options,
    printers,
    defaultOptions: exports.defaultOptions,
    parsers: exports.parsers,
};
