import { PropertyValueType } from '@augment-vir/common';
import { SupportOptionType as PrettierOptionType } from 'prettier';
export declare const envDebugKey = "NEW_LINE_DEBUG";
export declare const nextLinePatternComment = "prettier-multiline-arrays-next-line-pattern:";
export declare const untilNextLinePatternCommentRegExp: RegExp;
export declare const setLinePatternComment = "prettier-multiline-arrays-set-line-pattern:";
export declare const untilSetLinePatternCommentRegExp: RegExp;
export declare const nextWrapThresholdComment = "prettier-multiline-arrays-next-threshold:";
export declare const untilNextWrapThresholdCommentRegExp: RegExp;
export declare const setWrapThresholdComment = "prettier-multiline-arrays-set-threshold:";
export declare const untilSetWrapThresholdCommentRegExp: RegExp;
export declare const resetComment = "prettier-multiline-arrays-reset";
export type MultilineArrayOptions = {
    /**
     * If there are MORE elements in the array than this, the array will be forced to wrap.
     *
     * This defaults to -1, indicating that no special wrapping enforcement will take place.
     *
     * Set to 2 to only wrap if there are more than 2 element. Etc.
     */
    multilineArraysWrapThreshold: number;
    multilineArraysLinePattern: string;
    multilineFunctionArguments: boolean;
};
export declare const optionHelp: Record<keyof MultilineArrayOptions, string>;
export declare const optionPropertyValidators: {
    [Property in keyof MultilineArrayOptions]: (input: unknown) => input is MultilineArrayOptions[Property];
};
export declare const defaultMultilineArrayOptions: MultilineArrayOptions;
export declare function getPrettierOptionType(input: PropertyValueType<MultilineArrayOptions>): PrettierOptionType;
export declare function fillInOptions<T extends object>(input: T | undefined): MultilineArrayOptions & T;
