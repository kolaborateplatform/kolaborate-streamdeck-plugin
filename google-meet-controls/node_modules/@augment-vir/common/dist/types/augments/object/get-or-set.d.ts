import { MaybePromise } from '../promise/promise';
/**
 * Get a value from a map or call the callback and return its result and store the result in the
 * map.
 */
export declare function getOrSetFromMap<MapKey extends object, MapValue>(map: WeakMap<MapKey, MapValue>, key: MapKey, createNewValueCallback: () => MapValue): MapValue;
export declare function getOrSetFromMap<MapKey, MapValue>(map: Map<MapKey, MapValue>, key: MapKey, createNewValueCallback: () => MapValue): MapValue;
/**
 * Given an object, tries to get the given key in that object. If the key is not in that object,
 * then the given `createCallback` is used to create a new value which is then stored in the given
 * object and returned. Automatically handles `createCallback` returning a promise, if it does.
 *
 * @example
 *     // instead of doing this
 *     if (!myObject[myKey]) {
 *         myObject[myKey] = myValue;
 *     }
 *     // notice the not null assertion here
 *     retrievedValue![nextKey] = 'some value';
 *
 *     // do this
 *     getOrSetInObject(myObject, myKey, () => myValue);
 */
export declare function getOrSet<OriginalObject extends object, Key extends keyof OriginalObject>(originalObject: OriginalObject, key: Key, createCallback: () => OriginalObject[Key]): Required<OriginalObject>[Key];
export declare function getOrSet<OriginalObject extends object, Key extends keyof OriginalObject>(originalObject: OriginalObject, key: Key, createCallback: () => Promise<OriginalObject[Key]>): Promise<Required<OriginalObject>[Key]>;
export declare function getOrSet<OriginalObject extends object, Key extends keyof OriginalObject>(originalObject: OriginalObject, key: Key, createCallback: () => MaybePromise<OriginalObject[Key]>): MaybePromise<Required<OriginalObject>[Key]>;
