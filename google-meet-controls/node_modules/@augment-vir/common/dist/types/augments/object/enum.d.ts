export type EnumBaseType = Record<string, number | string>;
export declare function getEnumTypedKeys<T extends EnumBaseType>(input: T): (keyof T)[];
export declare function getEnumTypedValues<T extends EnumBaseType>(input: T): T[keyof T][];
/** Check if the given value is within the given enum. */
export declare function isEnumValue<T extends EnumBaseType>(input: unknown, checkEnum: T): input is T[keyof T];
/** Interpret a primitive as an enum value with type safety. */
export declare function ensureEnum<const ValueType extends `${EnumType[keyof EnumType]}`, const EnumType extends EnumBaseType>(value: ValueType, checkEnum: EnumType): EnumType[keyof EnumType];
export declare function filterToEnumValues<T extends EnumBaseType>(inputs: ReadonlyArray<unknown>, checkEnum: T, caseInsensitive?: boolean): T[keyof T][];
