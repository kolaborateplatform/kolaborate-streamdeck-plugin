import { FalsyTypes } from '../boolean';
export declare function wait(delayMs: number): Promise<void>;
export declare function waitValue<ResolutionValue>(delayMs: number, returnValue: ResolutionValue): Promise<ResolutionValue>;
export type WaitUntilTruthyOptions = {
    interval: {
        milliseconds: number;
    };
    timeout: {
        milliseconds: number;
    };
};
export declare const defaultWaitUntilDefinedOptions: WaitUntilTruthyOptions;
/**
 * Runs the predicate until it returns a truthy value, then returns that value. Use the options
 * input to modify the timeout and interval durations. Automatically catches errors and handles
 * async predicates.
 */
export declare function waitUntilTruthy<Value>(predicate: () => Value | Promise<Value> | FalsyTypes, failureMessage?: string | undefined, optionsInput?: Partial<WaitUntilTruthyOptions>): Promise<Awaited<Value>>;
