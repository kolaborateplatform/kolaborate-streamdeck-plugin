export declare const NaNString: string;
export declare function addCommasToNumber(input: number | string): string;
export declare function doesRequireScientificNotation(input: number): boolean;
/**
 * Given a min and max, ensures that they are in correct order. Meaning, min is less than max. If
 * that is not the case, the returned value is the given min and max values swapped.
 */
export declare function ensureMinAndMax({ min, max }: {
    min: number;
    max: number;
}): {
    min: number;
    max: number;
};
/**
 * Tries to convert the input into a number. Handles strings with commas. Note: this might return
 * `NaN`.
 */
export declare function toNumber(input: unknown): number;
/** @deprecated Use {@link toNumber} instead. */
export declare const convertIntoNumber: typeof toNumber;
/** Tries to convert the input into a number and throws an error if `NaN` is created. */
export declare function toEnsuredNumber(input: unknown): number;
/** Tries to convert the input into a number and returns `undefined` if `NaN` is created. */
export declare function toMaybeNumber(input: unknown): number | undefined;
/**
 * If the given value is outside the given min/max bounds, instead of clamping the number (as the
 * `clamp` function does), this function wraps the value around to the next bound.
 *
 * @example
 *     wrapNumber({min: 0, max: 100, value: 101}) == 0;
 */
export declare function wrapNumber({ max, min, value }: {
    value: number;
    max: number;
    min: number;
}): number;
export declare function round(inputs: {
    number: number;
    digits: number;
}): number;
/** Clamp's the given value to within the min and max bounds, inclusive. */
export declare function clamp({ value, min, max }: {
    value: number;
    min: number;
    max: number;
}): number;
/** Standard box dimensions. */
export type Dimensions = {
    width: number;
    height: number;
};
