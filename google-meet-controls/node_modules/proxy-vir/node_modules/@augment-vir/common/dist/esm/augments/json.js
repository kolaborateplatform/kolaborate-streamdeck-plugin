import { assertRunTimeType, getRunTimeType, isRunTimeType } from 'run-time-assertions';
import { ensureError } from './error';
import { assertMatchesObjectShape } from './object/matches-object-shape';
import { isObject } from './object/object';
export function parseJson({ jsonString, errorHandler, shapeMatcher, }) {
    try {
        const parsedJson = JSON.parse(jsonString);
        if (shapeMatcher != undefined) {
            if (isRunTimeType(shapeMatcher, 'object')) {
                assertMatchesObjectShape(parsedJson, shapeMatcher);
            }
            else {
                assertRunTimeType(parsedJson, getRunTimeType(shapeMatcher), 'parsedJson');
            }
        }
        return parsedJson;
    }
    catch (error) {
        if (errorHandler) {
            return errorHandler(error);
        }
        else {
            throw error;
        }
    }
}
export function stringifyJson({ source, whitespace, errorHandler, }) {
    try {
        const stringifiedJson = JSON.stringify(source, undefined, whitespace);
        return stringifiedJson;
    }
    catch (error) {
        if (errorHandler) {
            return errorHandler(error);
        }
        else {
            throw error;
        }
    }
}
const areJsonEqualFailureMessage = 'Failed to compare objects using JSON.stringify';
function baseAreJsonEqual(a, b, ignoreStringifyErrors) {
    return (stringifyJson({
        source: a,
        errorHandler(error) {
            if (ignoreStringifyErrors) {
                return '';
            }
            else {
                throw error;
            }
        },
    }) ===
        stringifyJson({
            source: b,
            errorHandler(error) {
                if (ignoreStringifyErrors) {
                    return '';
                }
                else {
                    throw error;
                }
            },
        }));
}
export function areJsonEqual(a, b, options = {}) {
    try {
        if (a === b) {
            return true;
        }
        if (isObject(a) && isObject(b)) {
            const areKeysEqual = baseAreJsonEqual(Object.keys(a).sort(), Object.keys(b).sort(), !!options?.ignoreNonSerializableProperties);
            if (!areKeysEqual) {
                return false;
            }
            return Object.keys(a).every((keyName) => {
                return areJsonEqual(a[keyName], b[keyName]);
            });
        }
        else {
            return baseAreJsonEqual(a, b, !!options?.ignoreNonSerializableProperties);
        }
    }
    catch (caught) {
        const error = ensureError(caught);
        if (error.message.startsWith(areJsonEqualFailureMessage)) {
            throw error;
        }
        error.message = `${areJsonEqualFailureMessage}: ${error.message}`;
        throw error;
    }
}
