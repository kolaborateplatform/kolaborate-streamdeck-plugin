import { isRunTimeType } from 'run-time-assertions';
import { isTruthy } from '../boolean';
import { typedSplit } from '../common-string';
import { assertMatchesObjectShape } from '../object/matches-object-shape';
import { removePrefix } from './prefixes';
export function objectToSearchParamsString(inputObject) {
    const valueStrings = Object.entries(inputObject)
        .map(([key, value,]) => {
        if (value == undefined) {
            return undefined;
        }
        return `${key}=${String(value)}`;
    })
        .filter(isTruthy);
    if (valueStrings.length) {
        return `?${valueStrings.join('&')}`;
    }
    else {
        return '';
    }
}
function splitSearchString(searchString) {
    const params = removePrefix({ value: searchString, prefix: '?' }).split('&');
    const paramEntries = params
        .map((param) => {
        const [key, ...everythingElse] = typedSplit(param, '=');
        const value = everythingElse.join('');
        if (!value && !key) {
            return undefined;
        }
        return [
            key,
            value,
        ];
    })
        .filter(isTruthy);
    return paramEntries;
}
export function urlToSearchParamsObject(inputUrl, verifyShape) {
    const ensuredUrl = isRunTimeType(inputUrl, 'string') ? new URL(inputUrl) : inputUrl;
    const searchEntries = splitSearchString(ensuredUrl.search);
    const paramsObject = Object.fromEntries(searchEntries);
    if (verifyShape) {
        assertMatchesObjectShape(paramsObject, verifyShape);
    }
    return paramsObject;
}
