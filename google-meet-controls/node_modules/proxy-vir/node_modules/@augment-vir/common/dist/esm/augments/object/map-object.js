import { getObjectTypedKeys } from './object-entries';
/**
 * Map an object's keys to new values synchronously. This is different from plain mapObjectValues in
 * that this will not wrap the return value in a promise if any of the new object values are
 * promises. This function also requires currying in order to get the types correct. This allows you
 * to explicitly state the return type.
 *
 * @example
 *     mapObjectValuesSync({objectToIterateOver: 'initial value'})(callback);
 */
export function mapObjectValuesSync(inputObject) {
    function innerMap(mapCallback) {
        const mappedObject = getObjectTypedKeys(inputObject).reduce((accum, currentKey) => {
            const mappedValue = mapCallback(currentKey, inputObject[currentKey], inputObject);
            return {
                ...accum,
                [currentKey]: mappedValue,
            };
        }, {});
        return mappedObject;
    }
    return innerMap;
}
/**
 * Creates a new object with the same properties as the input object, but with values set to the
 * result of mapCallback for each property.
 */
export function mapObjectValues(inputObject, mapCallback) {
    let gotAPromise = false;
    const mappedObject = getObjectTypedKeys(inputObject).reduce((accum, currentKey) => {
        const mappedValue = mapCallback(currentKey, inputObject[currentKey], inputObject);
        if (mappedValue instanceof Promise) {
            gotAPromise = true;
        }
        return {
            ...accum,
            [currentKey]: mappedValue,
        };
    }, {});
    if (gotAPromise) {
        return new Promise(async (resolve, reject) => {
            try {
                await Promise.all(getObjectTypedKeys(mappedObject).map(async (key) => {
                    const value = await mappedObject[key];
                    mappedObject[key] = value;
                }));
                resolve(mappedObject);
            }
            catch (error) {
                reject(error);
            }
        });
    }
    else {
        return mappedObject;
    }
}
