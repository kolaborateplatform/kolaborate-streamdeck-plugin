/**
 * Measures how long (in milliseconds) the given callback takes to run to completion. Automatically
 * switches to async mode and awaits callbacks if they return a promise (otherwise this function is
 * purely synchronous).
 */
export function timeCallback(callback) {
    const startTime = Date.now();
    const result = callback();
    if (result instanceof Promise) {
        return new Promise(async (resolve, reject) => {
            try {
                await result;
                const endTime = Date.now();
                resolve(endTime - startTime);
            }
            catch (caught) {
                reject(caught);
            }
        });
    }
    const endTime = Date.now();
    return (endTime - startTime);
}
/**
 * Measures how long (in milliseconds) the given callback takes to run to completion. Automatically
 * switches to async mode and awaits callbacks if they return a promise (otherwise this function is
 * purely synchronous).
 *
 * Alias of timeCallback.
 */
export const measureCallbackDuration = timeCallback;
