export declare function isPromiseLike<T>(input: T | unknown): input is T extends PromiseLike<infer ValueType> ? PromiseLike<ValueType> : PromiseLike<unknown>;
export type MaybePromise<T> = Promise<T> | T;
export declare class PromiseTimeoutError extends Error {
    readonly durationMs: number;
    readonly message: string;
    readonly name = "PromiseTimeoutError";
    constructor(durationMs: number, message?: string);
}
export declare function wrapPromiseInTimeout<PromiseValueType>(durationMs: number, originalPromise: PromiseLike<PromiseValueType>): Promise<PromiseValueType>;
/**
 * Call a function asynchronously without interrupting current synchronous execution, even if the
 * function was originally synchronous.
 */
export declare function callAsynchronously<T>(callback: () => MaybePromise<T>): Promise<T>;
export declare function executeWithRetries<T>(retryCount: number, callback: () => T): Promise<T>;
