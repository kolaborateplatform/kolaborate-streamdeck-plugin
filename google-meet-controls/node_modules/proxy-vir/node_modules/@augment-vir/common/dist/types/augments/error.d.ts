import { RequireExactlyOne } from 'type-fest';
import { NoInputsFunction } from './function';
import { AtLeastTuple } from './tuple';
export declare function combineErrors(errors: AtLeastTuple<Error, 1>): Error;
export declare function combineErrors(errors: ReadonlyArray<never>): undefined;
export declare function combineErrors(errors: ReadonlyArray<Error>): Error | undefined;
export declare function combineErrors(errors?: undefined): undefined;
export declare function combineErrorMessages(errors?: ReadonlyArray<Error | string | undefined> | undefined): string;
export declare function extractErrorMessage(maybeError: unknown): string;
export declare function ensureError(maybeError: unknown): Error;
export declare function ensureErrorAndPrependMessage(maybeError: unknown, prependMessage: string): Error;
export type TryWrapInputs<CallbackReturn, FallbackReturn> = {
    callback: () => CallbackReturn;
} & RequireExactlyOne<{
    fallbackValue: FallbackReturn;
    catchCallback: (error: unknown) => FallbackReturn;
}>;
export declare function wrapInTry<CallbackReturn, FallbackReturn>(inputs: TryWrapInputs<CallbackReturn, FallbackReturn>): FallbackReturn | CallbackReturn;
export declare function executeAndReturnError<CallbackGeneric extends NoInputsFunction<PromiseLike<any>>>(callback: CallbackGeneric): Promise<Error | Awaited<ReturnType<CallbackGeneric>>>;
export declare function executeAndReturnError<CallbackGeneric extends NoInputsFunction>(callback: CallbackGeneric): Error | ReturnType<CallbackGeneric>;
