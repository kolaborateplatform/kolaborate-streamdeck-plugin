/**
 * Measures how long (in milliseconds) the given callback takes to run to completion. Automatically
 * switches to async mode and awaits callbacks if they return a promise (otherwise this function is
 * purely synchronous).
 */
export declare function timeCallback<T>(callback: () => T): T extends Promise<any> ? Promise<number> : number;
/**
 * Measures how long (in milliseconds) the given callback takes to run to completion. Automatically
 * switches to async mode and awaits callbacks if they return a promise (otherwise this function is
 * purely synchronous).
 *
 * Alias of timeCallback.
 */
export declare const measureCallbackDuration: typeof timeCallback;
