import { PartialAndUndefined } from '@augment-vir/common';
import { RequireExactlyOne } from 'type-fest';
export type CreateProxyOptions<ProxyType> = {
    /**
     * Indicates if this proxy is meant to be callable, or, in other words, if this proxy is meant
     * to proxy a function rather than just an object.
     */
    isCallable: boolean;
    /**
     * Indicates if the proxy should not be extensible. By default they are extensible, so set this
     * to true to change that behavior. Read JavaScript docs for "Object.isExtensible()" to
     * understand what being extensible means:
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible
     */
    isNotExtensible: boolean;
} & RequireExactlyOne<{
    /** Initial Target to wrap */
    initialTarget: Partial<ProxyType>;
    /** Initial Targets to wrap, in priority order */
    initialTargets: ReadonlyArray<Partial<ProxyType>>;
}>;
export type ProxyTypeBase = object | Function;
export type MultiTargetProxyModifier<ProxyType extends ProxyTypeBase> = {
    addFallbackTarget(target: Partial<ProxyType>): void;
    addOverrideTarget(target: Partial<ProxyType>): void;
    removeTarget(target: Partial<ProxyType>): boolean;
    getAllTargets(): ReadonlyArray<unknown>;
    addProxyHandlerOverride(handlerOverride: ProxyHandler<ProxyType>): void;
    addProxyHandlerFallback(handlerOverride: ProxyHandler<ProxyType>): void;
    removeProxyOverride(handlerOverride: ProxyHandler<ProxyType>): boolean;
    getAllTargets(): ReadonlyArray<ProxyType>;
};
export type WrappedMultiTargetProxy<ProxyType extends ProxyTypeBase> = {
    proxy: ProxyType;
    proxyModifier: MultiTargetProxyModifier<ProxyType>;
};
export declare function createWrappedMultiTargetProxy<ProxyType extends ProxyTypeBase>(options?: PartialAndUndefined<CreateProxyOptions<ProxyType>> | undefined): WrappedMultiTargetProxy<ProxyType>;
